{"name":"Antnet","tagline":"AntNet Algorithm - Ant-based routing in networks","body":"### AntNet is an algorithm for adaptive best-effort routing in IP networks. AntNet's design is based on the Ant Colony Optimization (ACO) framework.\r\n\r\nACO features a multi-agent organization, stigmergic communication among the agents, distributed operations, use of a stochastic decision policy to construct solutions, stigmergic learning of the parameters of the decision policy.\r\n\r\nREMEMBER, YOU NEED GCC4.0 TO INSTALL NS2.34 WARNING If you have made any alterations to your NS2.34 (e.g. installing newer protocols), installing with the below instructions MAY overright your changes. If you have made alterations and you still want to use this protocol. The changelog below should be helpful to you in getting Antnet into ns2.34 without destroying your additions.\r\n\r\n#### Instructions copy the files provided into NS2.34 directory as is.\r\n```\r\nRun: ./configure make\r\n```\r\nFinally, enjoy\r\n\r\nChange log for none destructive install Additions we're made to ns2.34 to get antnet to work. The below is a guide only to be used in troubleshooting and ARE NOT COMPLETE INSTRUCTIONS. Not all changes are documented below but with these and following the clear advice on http://elmurod.net/wps/?p=157 on how to add a new routing protocol (TIP: Follow the instructions on the site substituting his protocol name \"wfrp\" for \"antnet\" and then make the changes below. This should get you antnet compiled and working)\r\n\r\n```\r\n// =========================== // queue/drop-tail.h // =========================== [Code]\r\n\r\npublic: int getlength();\r\n\r\n[/Code] Added to the DropTail class\r\n\r\n// =========================== // queue/drop-tail.cc // =========================== [Code]\r\n\r\nint DropTail::getlength() { return q_->length(); } [/Code] add this method to queue/drop-tail.cc\r\n\r\n// =========================== // queue/priqueue.cc // =========================== [Code]\r\n\r\ncase PT_ANT: if (ch->direction() == hdr_cmn::UP) { recvHighPriority(p, h); } else { Queue::recv(p, h); } break; [/Code] Added to queue/priqueue.cc instead\r\n\r\n// =========================== // common/packet.h // =========================== [Code]\r\n\r\nname_[PT_ANT] = \"Ant\"; [/Code] Basically anywhere that the WFRP tutorial (The website above) tells you to put PT_WFRP, put PT_ANT instead\r\n\r\n// =========================== // trace/cmu-trace.cc // =========================== [Code]\r\ninclude\r\n\r\n[/Code] Remember to include this in cmu-trace.cc\r\n\r\n[Code]\r\n\r\nvoid CMUTrace::format_antnet(Packet *p, int offset) { struct hdr_ant_pkt *ah = HDR_ANT_PKT(p);\r\n\r\nif (pt_->tagged()) {\r\nsprintf(pt_->buffer() + offset,\r\n    \"-ant:o %d -ant:s %d -ant:l %d \",\r\n    ah->pkt_src(), ah->pkt_seq_num(), ah->pkt_len());\r\n}\r\nelse if (newtrace_) {\r\nsprintf(pt_->buffer() + offset,\r\n    \"-P ant -Po %d -Ps %d -Pl %d \",\r\n    ah->pkt_src(), ah->pkt_seq_num(), ah->pkt_len());\r\n}\r\nelse {\r\nsprintf(pt_->buffer() + offset,\r\n    \"[ant %d %d %d] \",\r\n    ah->pkt_src(), ah->pkt_seq_num(), ah->pkt_len());\r\n}\r\n\r\n} [/Code] The trace format function in cmu-trace.cc is the above taken from the ns2.33 version by Richardson Lima\r\n\r\n[Code]\r\n\r\ncase PT_ANT: format_antnet(p, offset); break; [/Code] Add this to the function CMUTrace::format(.....\r\n\r\n// =========================== // tcl/lib/ns-default.tcl // =========================== [Code]\r\nDefaults for Antnet\r\n\r\nAgent/Antnet set num_nodes_x_ 4 Agent/Antnet set num_nodes_y_ 4 Agent/Antnet set num_nodes_ 16 Agent/Antnet set r_factor_ 0.001 Agent/Antnet set timer_ant_ 0.03 [/Code] Add this at the end\r\n\r\n// =========================== // tcl/lib/ns-default.tcl // =========================== [Code]\r\n\r\nSimulator instproc get-drop-queue { n1 n2 } { $self instvar link_ set q [$link_($n1:$n2) queue] return $q } [/Code] Add this code to tcl/lib/ns-lib.tcl\r\n```\r\n\r\nAntNet, as well as most of the other ACO routing algorithms designed after AntNet, exhibits a number of interesting properties: it works in a fully distributed way, is highly adaptive to network and traffic changes, uses lightweight mobile agents (called ants) for active path sampling, is robust to agent failures, provides multipath routing, and automatically takes care of data load spreading.\" Dr. Gianni Di Caro is AntNet Creator and Currently senior researcher at Istituto Dalle Molle di Studi sull'Intelligenza Artificiale (IDSIA), in Lugano, Switzerland. The AntNet Algorithm for the Network Simulator NS-2 (www.isi.edu/nsnam/ns) is maintained by @RichardsonLima ([http://br.linkedin.com/in/richardsonlima](http://br.linkedin.com/in/richardsonlima)). \r\n\r\n### Suggestions/improvements\r\nRichardson Lima at richardsonlimasurfjiujitsu@gmail.com  and Matthew Orlinski at orlinskm@cs.man.ac.uk  \r\n\r\n","google":"UA-40759327-2","note":"Don't delete this file! It's used internally to help with page regeneration."}